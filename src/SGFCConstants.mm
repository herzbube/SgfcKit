// -----------------------------------------------------------------------------
// Copyright 2020 Patrick NÃ¤f (herzbube@herzbube.ch)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// -----------------------------------------------------------------------------

// TODO Cleanup unneeded stuff

// Project includes
#import "../include/SGFCConstants.h"
//#import "SgfcPrivateConstants.h"

// C++ Standard Library includes
#include <limits>

// System includes
#import <Foundation/NSString.h>

NSString* SGFCLibraryName = @"libsgfc++";
NSString* SGFCLibraryVersion = @"0.1 (alpha)";
NSString* SGFCSgfcVersion = @"1.18";

// Must be a positive number to indicate that the message was generated by
// SGFC.
//const int SGFCInvalidLineNumber = -1;
//const int SGFCInvalidColumnNumber = -1;
//const int SGFCLibraryErrorNumberNoError = 0;

//NSString* SGFCNoneValueString = SgfcPrivateConstants::EmptyString;
NSString* SGFCDoubleNormalString = @"1";
NSString* SGFCDoubleEmphasizedString = @"2";
NSString* SGFCColorBlackString = @"B";
NSString* SGFCColorWhiteString = @"W";
//NSString* SGFCGoMovePassString = SgfcPrivateConstants::EmptyString;

//const std::map<NSString*, SGFCPropertyType> SGFCPropertyNameToPropertyTypeMap =
//{
//  { "B", SGFCPropertyTypeB },
//  { "KO", SGFCPropertyTypeKO },
//  { "MN", SGFCPropertyTypeMN },
//  { "W", SGFCPropertyTypeW },
//  { "AB", SGFCPropertyTypeAB },
//  { "AE", SGFCPropertyTypeAE },
//  { "AW", SGFCPropertyTypeAW },
//  { "PL", SGFCPropertyTypePL },
//  { "C", SGFCPropertyTypeC },
//  { "DM", SGFCPropertyTypeDM },
//  { "GB", SGFCPropertyTypeGB },
//  { "GW", SGFCPropertyTypeGW },
//  { "HO", SGFCPropertyTypeHO },
//  { "N", SGFCPropertyTypeN },
//  { "UC", SGFCPropertyTypeUC },
//  { "V", SGFCPropertyTypeV },
//  { "BM", SGFCPropertyTypeBM },
//  { "DO", SGFCPropertyTypeDO },
//  { "IT", SGFCPropertyTypeIT },
//  { "TE", SGFCPropertyTypeTE },
//  { "AR", SGFCPropertyTypeAR },
//  { "CR", SGFCPropertyTypeCR },
//  { "DD", SGFCPropertyTypeDD },
//  { "LB", SGFCPropertyTypeLB },
//  { "LN", SGFCPropertyTypeLN },
//  { "MA", SGFCPropertyTypeMA },
//  { "SL", SGFCPropertyTypeSL },
//  { "SQ", SGFCPropertyTypeSQ },
//  { "TR", SGFCPropertyTypeTR },
//  { "AP", SGFCPropertyTypeAP },
//  { "CA", SGFCPropertyTypeCA },
//  { "FF", SGFCPropertyTypeFF },
//  { "GM", SGFCPropertyTypeGM },
//  { "ST", SGFCPropertyTypeST },
//  { "SZ", SGFCPropertyTypeSZ },
//  { "AN", SGFCPropertyTypeAN },
//  { "BR", SGFCPropertyTypeBR },
//  { "BT", SGFCPropertyTypeBT },
//  { "CP", SGFCPropertyTypeCP },
//  { "DT", SGFCPropertyTypeDT },
//  { "EV", SGFCPropertyTypeEV },
//  { "GN", SGFCPropertyTypeGN },
//  { "GC", SGFCPropertyTypeGC },
//  { "ON", SGFCPropertyTypeON },
//  { "OT", SGFCPropertyTypeOT },
//  { "PB", SGFCPropertyTypePB },
//  { "PC", SGFCPropertyTypePC },
//  { "PW", SGFCPropertyTypePW },
//  { "RE", SGFCPropertyTypeRE },
//  { "RO", SGFCPropertyTypeRO },
//  { "RU", SGFCPropertyTypeRU },
//  { "SO", SGFCPropertyTypeSO },
//  { "TM", SGFCPropertyTypeTM },
//  { "US", SGFCPropertyTypeUS },
//  { "WR", SGFCPropertyTypeWR },
//  { "WT", SGFCPropertyTypeWT },
//  { "BL", SGFCPropertyTypeBL },
//  { "OB", SGFCPropertyTypeOB },
//  { "OW", SGFCPropertyTypeOW },
//  { "WL", SGFCPropertyTypeWL },
//  { "FG", SGFCPropertyTypeFG },
//  { "PM", SGFCPropertyTypePM },
//  { "VW", SGFCPropertyTypeVW },
//  { "BS", SGFCPropertyTypeBS },
//  { "CH", SGFCPropertyTypeCH },
//  { "EL", SGFCPropertyTypeEL },
//  { "EX", SGFCPropertyTypeEX },
//  { "ID", SGFCPropertyTypeID },
//  { "L", SGFCPropertyTypeL },
//  { "LT", SGFCPropertyTypeLT },
//  { "M", SGFCPropertyTypeM },
//  { "OM", SGFCPropertyTypeOM },
//  { "OP", SGFCPropertyTypeOP },
//  { "OV", SGFCPropertyTypeOV },
//  { "RG", SGFCPropertyTypeRG },
//  { "SC", SGFCPropertyTypeSC },
//  { "SE", SGFCPropertyTypeSE },
//  { "SI", SGFCPropertyTypeSI },
//  { "TC", SGFCPropertyTypeTC },
//  { "WS", SGFCPropertyTypeWS },
//  { "HA", SGFCPropertyTypeHA },
//  { "KM", SGFCPropertyTypeKM },
//  { "TB", SGFCPropertyTypeTB },
//  { "TW", SGFCPropertyTypeTW },
//  { "CO", SGFCPropertyTypeCO },
//  { "CV", SGFCPropertyTypeCV },
//  { "DI", SGFCPropertyTypeDI },
//  { "MI", SGFCPropertyTypeMI },
//  { "IY", SGFCPropertyTypeIY },
//  { "SU", SGFCPropertyTypeSU },
//  { "IS", SGFCPropertyTypeIS },
//  { "AA", SGFCPropertyTypeAA },
//  { "BO", SGFCPropertyTypeBO },
//  { "WO", SGFCPropertyTypeWO },
//  { "NP", SGFCPropertyTypeNP },
//  { "NR", SGFCPropertyTypeNR },
//  { "NS", SGFCPropertyTypeNS },
//  { "CS", SGFCPropertyTypeCS },
//  { "MS", SGFCPropertyTypeMS },
//  { "SS", SGFCPropertyTypeSS },
//  { "TS", SGFCPropertyTypeTS },
//  { "RP", SGFCPropertyTypeRP },
//  { "AS", SGFCPropertyTypeAS },
//  { "IP", SGFCPropertyTypeIP },
//  { "KI", SGFCPropertyTypeKI },
//};

//const std::map<SGFCPropertyType, NSString*> SGFCPropertyTypeToPropertyNameMap =
//{
//  { SGFCPropertyTypeB, "B" },
//  { SGFCPropertyTypeKO, "KO" },
//  { SGFCPropertyTypeMN, "MN" },
//  { SGFCPropertyTypeW, "W" },
//  { SGFCPropertyTypeAB, "AB" },
//  { SGFCPropertyTypeAE, "AE" },
//  { SGFCPropertyTypeAW, "AW" },
//  { SGFCPropertyTypePL, "PL" },
//  { SGFCPropertyTypeC, "C" },
//  { SGFCPropertyTypeDM, "DM" },
//  { SGFCPropertyTypeGB, "GB" },
//  { SGFCPropertyTypeGW, "GW" },
//  { SGFCPropertyTypeHO, "HO" },
//  { SGFCPropertyTypeN, "N" },
//  { SGFCPropertyTypeUC, "UC" },
//  { SGFCPropertyTypeV, "V" },
//  { SGFCPropertyTypeBM, "BM" },
//  { SGFCPropertyTypeDO, "DO" },
//  { SGFCPropertyTypeIT, "IT" },
//  { SGFCPropertyTypeTE, "TE" },
//  { SGFCPropertyTypeAR, "AR" },
//  { SGFCPropertyTypeCR, "CR" },
//  { SGFCPropertyTypeDD, "DD" },
//  { SGFCPropertyTypeLB, "LB" },
//  { SGFCPropertyTypeLN, "LN" },
//  { SGFCPropertyTypeMA, "MA" },
//  { SGFCPropertyTypeSL, "SL" },
//  { SGFCPropertyTypeSQ, "SQ" },
//  { SGFCPropertyTypeTR, "TR" },
//  { SGFCPropertyTypeAP, "AP" },
//  { SGFCPropertyTypeCA, "CA" },
//  { SGFCPropertyTypeFF, "FF" },
//  { SGFCPropertyTypeGM, "GM" },
//  { SGFCPropertyTypeST, "ST" },
//  { SGFCPropertyTypeSZ, "SZ" },
//  { SGFCPropertyTypeAN, "AN" },
//  { SGFCPropertyTypeBR, "BR" },
//  { SGFCPropertyTypeBT, "BT" },
//  { SGFCPropertyTypeCP, "CP" },
//  { SGFCPropertyTypeDT, "DT" },
//  { SGFCPropertyTypeEV, "EV" },
//  { SGFCPropertyTypeGN, "GN" },
//  { SGFCPropertyTypeGC, "GC" },
//  { SGFCPropertyTypeON, "ON" },
//  { SGFCPropertyTypeOT, "OT" },
//  { SGFCPropertyTypePB, "PB" },
//  { SGFCPropertyTypePC, "PC" },
//  { SGFCPropertyTypePW, "PW" },
//  { SGFCPropertyTypeRE, "RE" },
//  { SGFCPropertyTypeRO, "RO" },
//  { SGFCPropertyTypeRU, "RU" },
//  { SGFCPropertyTypeSO, "SO" },
//  { SGFCPropertyTypeTM, "TM" },
//  { SGFCPropertyTypeUS, "US" },
//  { SGFCPropertyTypeWR, "WR" },
//  { SGFCPropertyTypeWT, "WT" },
//  { SGFCPropertyTypeBL, "BL" },
//  { SGFCPropertyTypeOB, "OB" },
//  { SGFCPropertyTypeOW, "OW" },
//  { SGFCPropertyTypeWL, "WL" },
//  { SGFCPropertyTypeFG, "FG" },
//  { SGFCPropertyTypePM, "PM" },
//  { SGFCPropertyTypeVW, "VW" },
//  { SGFCPropertyTypeBS, "BS" },
//  { SGFCPropertyTypeCH, "CH" },
//  { SGFCPropertyTypeEL, "EL" },
//  { SGFCPropertyTypeEX, "EX" },
//  { SGFCPropertyTypeID, "ID" },
//  { SGFCPropertyTypeL, "L" },
//  { SGFCPropertyTypeLT, "LT" },
//  { SGFCPropertyTypeM, "M" },
//  { SGFCPropertyTypeOM, "OM" },
//  { SGFCPropertyTypeOP, "OP" },
//  { SGFCPropertyTypeOV, "OV" },
//  { SGFCPropertyTypeRG, "RG" },
//  { SGFCPropertyTypeSC, "SC" },
//  { SGFCPropertyTypeSE, "SE" },
//  { SGFCPropertyTypeSI, "SI" },
//  { SGFCPropertyTypeTC, "TC" },
//  { SGFCPropertyTypeWS, "WS" },
//  { SGFCPropertyTypeHA, "HA" },
//  { SGFCPropertyTypeKM, "KM" },
//  { SGFCPropertyTypeTB, "TB" },
//  { SGFCPropertyTypeTW, "TW" },
//  { SGFCPropertyTypeCO, "CO" },
//  { SGFCPropertyTypeCV, "CV" },
//  { SGFCPropertyTypeDI, "DI" },
//  { SGFCPropertyTypeMI, "MI" },
//  { SGFCPropertyTypeIY, "IY" },
//  { SGFCPropertyTypeSU, "SU" },
//  { SGFCPropertyTypeIS, "IS" },
//  { SGFCPropertyTypeAA, "AA" },
//  { SGFCPropertyTypeBO, "BO" },
//  { SGFCPropertyTypeWO, "WO" },
//  { SGFCPropertyTypeNP, "NP" },
//  { SGFCPropertyTypeNR, "NR" },
//  { SGFCPropertyTypeNS, "NS" },
//  { SGFCPropertyTypeCS, "CS" },
//  { SGFCPropertyTypeMS, "MS" },
//  { SGFCPropertyTypeSS, "SS" },
//  { SGFCPropertyTypeTS, "TS" },
//  { SGFCPropertyTypeRP, "RP" },
//  { SGFCPropertyTypeAS, "AS" },
//  { SGFCPropertyTypeIP, "IP" },
//  { SGFCPropertyTypeKI, "KI" },
//};

//const std::map<SgfcPropertyType, SgfcPropertyCategory> SgfcConstants::PropertyTypeToPropertyCategoryMap =
//{
//  // Standard properties from FF4
//  { SgfcPropertyType::B, SgfcPropertyCategory::Move },
//  { SgfcPropertyType::KO, SgfcPropertyCategory::Move },
//  { SgfcPropertyType::MN, SgfcPropertyCategory::Move },
//  { SgfcPropertyType::W, SgfcPropertyCategory::Move },
//  { SgfcPropertyType::AB, SgfcPropertyCategory::Setup },
//  { SgfcPropertyType::AE, SgfcPropertyCategory::Setup },
//  { SgfcPropertyType::AW, SgfcPropertyCategory::Setup },
//  { SgfcPropertyType::PL, SgfcPropertyCategory::Setup },
//  { SgfcPropertyType::C, SgfcPropertyCategory::NodeAnnotation },
//  { SgfcPropertyType::DM, SgfcPropertyCategory::NodeAnnotation },
//  { SgfcPropertyType::GB, SgfcPropertyCategory::NodeAnnotation },
//  { SgfcPropertyType::GW, SgfcPropertyCategory::NodeAnnotation },
//  { SgfcPropertyType::HO, SgfcPropertyCategory::NodeAnnotation },
//  { SgfcPropertyType::N, SgfcPropertyCategory::NodeAnnotation },
//  { SgfcPropertyType::UC, SgfcPropertyCategory::NodeAnnotation },
//  { SgfcPropertyType::V, SgfcPropertyCategory::NodeAnnotation },
//  { SgfcPropertyType::BM, SgfcPropertyCategory::MoveAnnotation },
//  { SgfcPropertyType::DO, SgfcPropertyCategory::MoveAnnotation },
//  { SgfcPropertyType::IT, SgfcPropertyCategory::MoveAnnotation },
//  { SgfcPropertyType::TE, SgfcPropertyCategory::MoveAnnotation },
//  { SgfcPropertyType::AR, SgfcPropertyCategory::Markup },
//  { SgfcPropertyType::CR, SgfcPropertyCategory::Markup },
//  { SgfcPropertyType::DD, SgfcPropertyCategory::Markup },
//  { SgfcPropertyType::LB, SgfcPropertyCategory::Markup },
//  { SgfcPropertyType::LN, SgfcPropertyCategory::Markup },
//  { SgfcPropertyType::MA, SgfcPropertyCategory::Markup },
//  { SgfcPropertyType::SL, SgfcPropertyCategory::Markup },
//  { SgfcPropertyType::SQ, SgfcPropertyCategory::Markup },
//  { SgfcPropertyType::TR, SgfcPropertyCategory::Markup },
//  { SgfcPropertyType::AP, SgfcPropertyCategory::Root },
//  { SgfcPropertyType::CA, SgfcPropertyCategory::Root },
//  { SgfcPropertyType::FF, SgfcPropertyCategory::Root },
//  { SgfcPropertyType::GM, SgfcPropertyCategory::Root },
//  { SgfcPropertyType::ST, SgfcPropertyCategory::Root },
//  { SgfcPropertyType::SZ, SgfcPropertyCategory::Root },
//  { SgfcPropertyType::AN, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::BR, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::BT, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::CP, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::DT, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::EV, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::GN, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::GC, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::ON, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::OT, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::PB, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::PC, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::PW, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::RE, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::RO, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::RU, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::SO, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::TM, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::US, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::WR, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::WT, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::BL, SgfcPropertyCategory::Timing },
//  { SgfcPropertyType::OB, SgfcPropertyCategory::Timing },
//  { SgfcPropertyType::OW, SgfcPropertyCategory::Timing },
//  { SgfcPropertyType::WL, SgfcPropertyCategory::Timing },
//  { SgfcPropertyType::FG, SgfcPropertyCategory::Miscellaneous },
//  { SgfcPropertyType::PM, SgfcPropertyCategory::Miscellaneous },
//  { SgfcPropertyType::VW, SgfcPropertyCategory::Miscellaneous },
//
//  // Standard properties from FF1-3                               // Index page       FF3 specs page    FF1 specs page
//  { SgfcPropertyType::BS, SgfcPropertyCategory::GameInfo },       // GameInfo         Root              Root
//  { SgfcPropertyType::CH, SgfcPropertyCategory::MoveAnnotation }, // -                MoveAnnotation    -
//  { SgfcPropertyType::EL, SgfcPropertyCategory::Miscellaneous },  // -                n/a               -
//  { SgfcPropertyType::EX, SgfcPropertyCategory::Miscellaneous },  // -                n/a               -
//  { SgfcPropertyType::ID, SgfcPropertyCategory::GameInfo },       // GameInfo         GameInfo          n/a
//  { SgfcPropertyType::L, SgfcPropertyCategory::Markup },          // -                n/a               Superseded by LB
//  { SgfcPropertyType::LT, SgfcPropertyCategory::Root },           // -                Root              n/a
//  { SgfcPropertyType::M, SgfcPropertyCategory::Markup },          // -                n/a               "Marked points"
//  { SgfcPropertyType::OM, SgfcPropertyCategory::Timing },         // -                Timing            n/a
//  { SgfcPropertyType::OP, SgfcPropertyCategory::Timing },         // -                Timing            n/a
//  { SgfcPropertyType::OV, SgfcPropertyCategory::Timing },         // -                Timing            n/a
//  { SgfcPropertyType::RG, SgfcPropertyCategory::Markup },         // -                "Sets of points can be marked [...]"
//  { SgfcPropertyType::SC, SgfcPropertyCategory::Markup },         // -                "Sets of points can be marked [...]"
//  { SgfcPropertyType::SE, SgfcPropertyCategory::Miscellaneous },  // -                 -                n/a
//                                                                  // SE in Lines of Action is a Markup property
//  { SgfcPropertyType::SI, SgfcPropertyCategory::MoveAnnotation }, // -                 MoveAnnotation   n/a
//  { SgfcPropertyType::TC, SgfcPropertyCategory::Miscellaneous },  // -                 -                n/a
//  { SgfcPropertyType::WS, SgfcPropertyCategory::GameInfo },       // GameInfo          Root             Root
//
//  // Game of Go properties
//  { SgfcPropertyType::HA, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::KM, SgfcPropertyCategory::GameInfo },
//  { SgfcPropertyType::TB, SgfcPropertyCategory::Markup },
//  { SgfcPropertyType::TW, SgfcPropertyCategory::Markup },
//
//  // Non-standard properties
//  { SgfcPropertyType::Unknown, SgfcPropertyCategory::Miscellaneous },
//};
//
//const std::map<SgfcPropertyType, SgfcPropertyTraits> SgfcConstants::PropertyTypeToPropertyTraitsMap =
//{
//  // Standard properties from FF4
//  { SgfcPropertyType::B, 0 },
//  { SgfcPropertyType::KO, 0 },
//  { SgfcPropertyType::MN, 0 },
//  { SgfcPropertyType::W, 0 },
//  { SgfcPropertyType::AB, 0 },
//  { SgfcPropertyType::AE, 0 },
//  { SgfcPropertyType::AW, 0 },
//  { SgfcPropertyType::PL, 0 },
//  { SgfcPropertyType::C, 0 },
//  { SgfcPropertyType::DM, 0 },
//  { SgfcPropertyType::GB, 0 },
//  { SgfcPropertyType::GW, 0 },
//  { SgfcPropertyType::HO, 0 },
//  { SgfcPropertyType::N, 0 },
//  { SgfcPropertyType::UC, 0 },
//  { SgfcPropertyType::V, 0 },
//  { SgfcPropertyType::BM, 0 },
//  { SgfcPropertyType::DO, 0 },
//  { SgfcPropertyType::IT, 0 },
//  { SgfcPropertyType::TE, 0 },
//  { SgfcPropertyType::AR, 0 },
//  { SgfcPropertyType::CR, 0 },
//  { SgfcPropertyType::DD, static_cast<SgfcPropertyTraits>(SgfcPropertyTrait::Inheritable) },
//  { SgfcPropertyType::LB, 0 },
//  { SgfcPropertyType::LN, 0 },
//  { SgfcPropertyType::MA, 0 },
//  { SgfcPropertyType::SL, 0 },
//  { SgfcPropertyType::SQ, 0 },
//  { SgfcPropertyType::TR, 0 },
//  { SgfcPropertyType::AP, 0 },
//  { SgfcPropertyType::CA, 0 },
//  { SgfcPropertyType::FF, 0 },
//  { SgfcPropertyType::GM, 0 },
//  { SgfcPropertyType::ST, 0 },
//  { SgfcPropertyType::SZ, 0 },
//  { SgfcPropertyType::AN, 0 },
//  { SgfcPropertyType::BR, 0 },
//  { SgfcPropertyType::BT, 0 },
//  { SgfcPropertyType::CP, 0 },
//  { SgfcPropertyType::DT, 0 },
//  { SgfcPropertyType::EV, 0 },
//  { SgfcPropertyType::GN, 0 },
//  { SgfcPropertyType::GC, 0 },
//  { SgfcPropertyType::ON, 0 },
//  { SgfcPropertyType::OT, 0 },
//  { SgfcPropertyType::PB, 0 },
//  { SgfcPropertyType::PC, 0 },
//  { SgfcPropertyType::PW, 0 },
//  { SgfcPropertyType::RE, 0 },
//  { SgfcPropertyType::RO, 0 },
//  { SgfcPropertyType::RU, 0 },
//  { SgfcPropertyType::SO, 0 },
//  { SgfcPropertyType::TM, 0 },
//  { SgfcPropertyType::US, 0 },
//  { SgfcPropertyType::WR, 0 },
//  { SgfcPropertyType::WT, 0 },
//  { SgfcPropertyType::BL, 0 },
//  { SgfcPropertyType::OB, 0 },
//  { SgfcPropertyType::OW, 0 },
//  { SgfcPropertyType::WL, 0 },
//  { SgfcPropertyType::FG, 0 },
//  { SgfcPropertyType::PM, static_cast<SgfcPropertyTraits>(SgfcPropertyTrait::Inheritable) },
//  { SgfcPropertyType::VW, static_cast<SgfcPropertyTraits>(SgfcPropertyTrait::Inheritable) },
//
//  // Standard properties from FF1-3
//  { SgfcPropertyType::BS, 0 },
//  { SgfcPropertyType::CH, 0 },
//  { SgfcPropertyType::EL, 0 },
//  { SgfcPropertyType::EX, 0 },
//  { SgfcPropertyType::ID, 0 },
//  { SgfcPropertyType::L, 0 },
//  { SgfcPropertyType::LT, 0 },
//  { SgfcPropertyType::M, 0 },
//  { SgfcPropertyType::OM, 0 },
//  { SgfcPropertyType::OP, 0 },
//  { SgfcPropertyType::OV, 0 },
//  { SgfcPropertyType::RG, 0 },
//  { SgfcPropertyType::SC, 0 },
//  { SgfcPropertyType::SE, 0 },
//  { SgfcPropertyType::SI, 0 },
//  { SgfcPropertyType::TC, 0 },
//  { SgfcPropertyType::WS, 0 },
//
//  // Game of Go properties
//  { SgfcPropertyType::HA, 0 },
//  { SgfcPropertyType::KM, 0 },
//  { SgfcPropertyType::TB, 0 },
//  { SgfcPropertyType::TW, 0 },
//
//  // Non-standard properties
//  { SgfcPropertyType::Unknown, 0 },
//};

//const std::map<SGFCNumber, SGFCGameType> SGFCGameTypeAsNumberToGameTypeMap =
//{
//  { 1, SGFCGameTypeGo },
//  { 2, SGFCGameTypeOthello },
//  { 3, SGFCGameTypeChess },
//  { 4, SGFCGameTypeGomokuAndRenju },
//  { 5, SGFCGameTypeNineMensMorris },
//  { 6, SGFCGameTypeBackgammon },
//  { 7, SGFCGameTypeChineseChess },
//  { 8, SGFCGameTypeShogi },
//  { 9, SGFCGameTypeLinesOfAction },
//  { 10, SGFCGameTypeAtaxx },
//  { 11, SGFCGameTypeHex },
//  { 12, SGFCGameTypeJungle },
//  { 13, SGFCGameTypeNeutron },
//  { 14, SGFCGameTypePhilosophersFootball },
//  { 15, SGFCGameTypeQuadrature },
//  { 16, SGFCGameTypeTrax },
//  { 17, SGFCGameTypeTantrix },
//  { 18, SGFCGameTypeAmazons },
//  { 19, SGFCGameTypeOcti },
//  { 20, SGFCGameTypeGess },
//  { 21, SGFCGameTypeTwixt },
//  { 22, SGFCGameTypeZertz },
//  { 23, SGFCGameTypePlateau },
//  { 24, SGFCGameTypeYinsh },
//  { 25, SGFCGameTypePunct },
//  { 26, SGFCGameTypeGobblet },
//  { 27, SGFCGameTypeHive },
//  { 28, SGFCGameTypeExxit },
//  { 29, SGFCGameTypeHnefatal },
//  { 30, SGFCGameTypeKuba },
//  { 31, SGFCGameTypeTripples },
//  { 32, SGFCGameTypeChase },
//  { 33, SGFCGameTypeTumblingDown },
//  { 34, SGFCGameTypeSahara },
//  { 35, SGFCGameTypeByte },
//  { 36, SGFCGameTypeFocus },
//  { 37, SGFCGameTypeDvonn },
//  { 38, SGFCGameTypeTamsk },
//  { 39, SGFCGameTypeGipf },
//  { 40, SGFCGameTypeKropki },
//};

//const std::map<SGFCGameType, SGFCNumber> SGFCGameTypeToGameTypeAsNumberMap =
//{
//  { SGFCGameTypeGo, 1 },
//  { SGFCGameTypeOthello, 2 },
//  { SGFCGameTypeChess, 3 },
//  { SGFCGameTypeGomokuAndRenju, 4 },
//  { SGFCGameTypeNineMensMorris, 5 },
//  { SGFCGameTypeBackgammon, 6 },
//  { SGFCGameTypeChineseChess, 7 },
//  { SGFCGameTypeShogi, 8 },
//  { SGFCGameTypeLinesOfAction, 9 },
//  { SGFCGameTypeAtaxx, 10 },
//  { SGFCGameTypeHex, 11 },
//  { SGFCGameTypeJungle, 12 },
//  { SGFCGameTypeNeutron, 13 },
//  { SGFCGameTypePhilosophersFootball, 14 },
//  { SGFCGameTypeQuadrature, 15 },
//  { SGFCGameTypeTrax, 16 },
//  { SGFCGameTypeTantrix, 17 },
//  { SGFCGameTypeAmazons, 18 },
//  { SGFCGameTypeOcti, 19 },
//  { SGFCGameTypeGess, 20 },
//  { SGFCGameTypeTwixt, 21 },
//  { SGFCGameTypeZertz, 22 },
//  { SGFCGameTypePlateau, 23 },
//  { SGFCGameTypeYinsh, 24 },
//  { SGFCGameTypePunct, 25 },
//  { SGFCGameTypeGobblet, 26 },
//  { SGFCGameTypeHive, 27 },
//  { SGFCGameTypeExxit, 28 },
//  { SGFCGameTypeHnefatal, 29 },
//  { SGFCGameTypeKuba, 30 },
//  { SGFCGameTypeTripples, 31 },
//  { SGFCGameTypeChase, 32 },
//  { SGFCGameTypeTumblingDown, 33 },
//  { SGFCGameTypeSahara, 34 },
//  { SGFCGameTypeByte, 35 },
//  { SGFCGameTypeFocus, 36 },
//  { SGFCGameTypeDvonn, 37 },
//  { SGFCGameTypeTamsk, 38 },
//  { SGFCGameTypeGipf, 39 },
//  { SGFCGameTypeKropki, 40 },
//};

const SGFCGameType SGFCDefaultGameType = SGFCGameTypeGo;
const SGFCNumber SGFCGameTypeNaN = std::numeric_limits<SGFCNumber>::min();
const SGFCBoardSize SGFCBoardSizeMinimum =  SGFCBoardSizeMake(1, 1);
const SGFCBoardSize SGFCBoardSizeMaximumGo = SGFCBoardSizeMake(52, 52);
const SGFCBoardSize SGFCBoardSizeDefaultGo = SGFCBoardSizeMake(19, 19);
const SGFCBoardSize SGFCBoardSizeDefaultChess = SGFCBoardSizeMake(8, 8);

NSExceptionName const SGFCInvalidOperationException = @"SGFCInvalidOperationException";
NSExceptionName const SGFCDocumentStructureException = @"SGFCDocumentStructureException";
NSExceptionName const SGFCNotImplementedException = @"SGFCNotImplementedException";

const SGFCBoardSize SGFCBoardSizeNone = SGFCBoardSizeMake(-1, -1);
const SGFCBoardSize SGFCBoardSizeInvalid = SGFCBoardSizeMake(-2, -2);

const SGFCNumber SGFCHandicapStonesNone = 0;
const SGFCReal SGFCKomiNone = 0.0;

const SGFCNodeTraits NodeTraitsNone = 0;
const SGFCNodeTraits NodeTraitsAll = std::numeric_limits<SGFCNodeTraits>::max();
const SGFCPropertyTraits PropertyTraitsNone = 0;
const SGFCPropertyTraits PropertyTraitsAll = std::numeric_limits<SGFCPropertyTraits>::max();
